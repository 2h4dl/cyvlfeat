from cyvlfeat.fisher import fisher
import numpy as np

def test_fisher_dimension():
    N = 1000
    K = 512
    D = 128
    
    x = np.random.uniform(size=(D, N)).astype(np.float32)
    means = np.random.uniform(size=(D, K)).astype(np.float32)
    covariances = np.random.uniform(size=(D, K)).astype(np.float32)
    priors = np.random.uniform(size=(K,)).astype(np.float32)
    priors /= np.linalg.norm(priors)
    enc = fisher(x, means, covariances, priors, verbose=True)
    
    expected = 2 * K * D
    observed = len(enc)
    assert(expected == observed)

def test_fisher_encoding():
    N = 21
    K = 3
    D = 5
    x = np.array([0.795000017,0.652999997,0.917999983,0.287000000,
                  0.870999992,0.202000007,0.490999997,0.921999991,
                  0.830999970,0.782999992,0.578000009,0.330000013,
                  0.602999985,0.018999999,0.389999986,0.236000001,
                  0.027000001,0.090999998,0.856999993,0.509000003,
                  0.529999971,0.458999991,0.108999997,0.414000005,
                  0.917999983,0.105999999,0.398999989,0.875999987,
                  0.442999989,0.035999998,0.772000015,0.458999991,
                  0.391000003,0.689999998,0.305000007,0.221000001,
                  0.432999998,0.263000011,0.796999991,0.644999981,
                  0.465000004,0.314999998,0.061000001,0.386999995,
                  0.538999975,0.027000001,0.163000003,0.841000021,
                  0.830999970,0.966000021,0.192000002,0.834999979,
                  0.503000021,0.056000002,0.779999971,0.685999990,
                  0.768000007,0.660000026,0.699999988,0.746999979,
                  0.404000014,0.861999989,0.814999998,0.930000007,
                  0.893999994,0.896000028,0.147000000,0.439999998,
                  0.382999986,0.003000000,0.962000012,0.481999993,
                  0.291000009,0.354000002,0.349000007,0.328999996,
                  0.186000004,0.690999985,0.425000012,0.333999991,
                  0.637000024,0.026000001,0.082999997,0.819000006,
                  0.490999997,0.354000002,0.017000001,0.602999985,
                  0.136000007,0.564000010,0.180000007,0.588999987,
                  0.634999990,0.273999989,0.024000000,0.621999979,
                  0.697000027,0.232999995,0.041000001,0.248999998,
                  0.859000027,0.328000009,0.458999991,0.086999997,
                  0.675999999]).reshape(D,N).astype(np.float32)
    
    mu = np.array([0.240999997,0.990999997,0.279000014,
                   0.575999975,0.943000019,0.270999998,
                   0.814999998,0.861999989,0.231999993,
                   0.829999983,0.899999976,0.699000001,
                   0.754000008,0.912999988,0.272000015]).reshape(D,K).astype(np.float32)
    sigma2 = np.ones((D,K),dtype=np.float32)
    prior = (1.0/K)*np.ones((K,),dtype=np.float32)


    observed_enc = fisher(x, mu, sigma2, prior, verbose=True)

    expected_enc = np.array([0.184882745,-0.297723919,0.159960508,
                             -0.097465880,-0.240295053,0.186319187,
                             -0.272803783,-0.238685876,0.191706747,
                             -0.239787027,-0.137581125,-0.143536851,
                             -0.105189353,-0.127559796,0.073534258,
                             -0.202596426,0.109019108,-0.203930125,
                             -0.212741673,-0.151264504,-0.227559134,
                             -0.164409965,-0.199554309,-0.219266668,
                             -0.186904252,-0.111626260,-0.112573944,
                             -0.145861149,-0.135243028,-0.150711998]).astype(np.float32)
    
    np.savetxt('enc.txt',observed_enc)
    assert(np.sum(np.abs(expected_enc-observed_enc))<1e-6)